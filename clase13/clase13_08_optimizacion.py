"""
üîé Ejercicio: Optimizaci√≥n simple de funciones con Scipy

Enunciado:
Una empresa quiere optimizar sus ventas. El costo total en funci√≥n de la cantidad vendida (x)
est√° dado por la funci√≥n:

    C(x) = (x - 3)**2 + 10

Esto representa que el costo es m√≠nimo cuando se venden cerca de 3 unidades, pero desconocemos 
exactamente cu√°ntas unidades minimizan el costo. Usaremos `scipy.optimize.minimize` para encontrar 
el valor √≥ptimo de x que minimiza la funci√≥n de costo C(x).

Objetivo: 
- Graficar la funci√≥n de costo.
- Usar `minimize` para encontrar el m√≠nimo.
- Visualizar el punto √≥ptimo.

Aplicaciones: 
Esta t√©cnica se puede aplicar a problemas reales como reducci√≥n de costos, maximizaci√≥n de beneficios 
o ajustes de par√°metros en ingenier√≠a y ciencia de datos.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize

# Definimos la funci√≥n objetivo (costo)
def costo(x):
    return (x - 3)**2 + 10

# Usamos scipy.optimize.minimize para encontrar el m√≠nimo
resultado = minimize(costo, x0=0)  # x0 es el valor inicial de b√∫squeda

# Resultados
x_optimo = resultado.x[0]
costo_minimo = resultado.fun

print(f"‚úÖ Cantidad √≥ptima para minimizar el costo: x = {x_optimo:.4f}")
print(f"üí∏ Costo m√≠nimo alcanzado: {costo_minimo:.4f}")

# Graficamos la funci√≥n y el punto m√≠nimo
x_vals = np.linspace(-2, 8, 200)
y_vals = costo(x_vals)

plt.figure(figsize=(8, 5))
plt.plot(x_vals, y_vals, label='Costo(x)', color='blue')
plt.scatter([x_optimo], [costo_minimo], color='red', label='M√≠nimo encontrado')
plt.title("Optimizaci√≥n de funci√≥n de costo")
plt.xlabel("Cantidad (x)")
plt.ylabel("Costo total")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
